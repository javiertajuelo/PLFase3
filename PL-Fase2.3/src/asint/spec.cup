package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoEval;
import alex.UnidadLexica;
import errors.GestionErroresEval;

scan with {: 
  return getScanner().next_token(); 
:};

parser code {: 
   private GestionErroresEval errores;

   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};

init with {: 
   errores = new GestionErroresEval();
   AnalizadorLexicoEval alex = (AnalizadorLexicoEval) getScanner();
   alex.fijaGestionErrores(errores);
:};

terminal 
    IF, ELSE, WHILE, READ, WRITE, NEW, DELETE, CALL, NL, 
    TRUE, FALSE, NULL, STRUCT, PROC, TYPE, EVAL, AND, OR, NOT,
    INT, REAL, BOOL, STRING, 
    IDEN, LIT_ENT, LIT_REAL, LIT_CADENA,
    MAS, MENOS, POR, DIV, MOD, 
    MENOR, MAYOR, MENIGUAL, MAYIGUAL, IGUAL, DISTINTO, 
    ASIGNACION, PAP, PCIERRE, CORAP, CORCIERRE, LLAVEAP, LLAVECIERRE,
    PUNTOYCOMA, COMA, PUNTO, PUNTERO, REFERENCIA, FINDECL;

non terminal 
    programa, programa_principal, declaracionesSeparador, declaraciones, 
    declaracion,tipo0, tipo1, tipo2, parametros,lista_parametros, parametro, 
    lista_instrucciones, instrucciones, instruccion,else_opt,campos, argumentos,lista_argumentos,
    expresion, expresion_asignacion, expresion_relacional, expresion_logica, 
    expresion_aditiva, expresion_multiplicativa, expresion_unaria, 
    expresion_acceso, factor, operador_multiplicativo,operador_unario,operador_relacional;


programa ::= LLAVEAP programa_principal LLAVECIERRE ;

programa_principal ::= declaracionesSeparador lista_instrucciones ;

declaracionesSeparador ::= declaraciones FINDECL ;
declaracionesSeparador ::= ;

declaraciones ::= declaraciones PUNTOYCOMA declaracion ;
declaraciones ::= declaracion;

declaracion ::= tipo0 IDEN ;
declaracion ::= TYPE tipo0 IDEN ;
declaracion ::= PROC IDEN PAP lista_parametros PCIERRE programa ;

tipo0 ::= tipo0 CORAP LIT_ENT CORCIERRE ;
tipo0 ::= tipo1 ;

tipo1 ::= PUNTERO tipo1 ;
tipo1 ::= tipo2 ;

tipo2 ::= INT ;
tipo2 ::= REAL ;
tipo2 ::= BOOL ;
tipo2 ::= STRING ;
tipo2 ::= STRUCT LLAVEAP campos LLAVECIERRE ;
tipo2 ::= IDEN ;

lista_parametros ::= parametros ;
lista_parametros ::= ; 

parametros ::= parametros COMA parametro ;
parametros ::= parametro ;  

parametro ::= tipo0 IDEN;
parametro ::= tipo0 REFERENCIA IDEN;
  
campos ::= campos COMA declaracion ;
campos ::= declaracion ;

lista_instrucciones ::= instrucciones ;
lista_instrucciones ::= ;
instrucciones ::= instrucciones PUNTOYCOMA instruccion ;
instrucciones ::= instruccion ;

instruccion ::= EVAL expresion ;
instruccion ::= IF expresion programa else_opt ;
instruccion ::= WHILE expresion programa ;
instruccion ::= READ expresion ;
instruccion ::= WRITE expresion ;
instruccion ::= NL ;
instruccion ::= NEW expresion ;
instruccion ::= DELETE expresion ;
instruccion ::= CALL IDEN PAP lista_argumentos PCIERRE ;
instruccion ::= programa ;

else_opt ::= ELSE programa ;
else_opt ::= ;
		
lista_argumentos ::= argumentos ;
lista_argumentos ::= ;  
argumentos ::= argumentos COMA expresion ;
argumentos ::= expresion ; 
			
expresion ::= expresion_asignacion ;

expresion_asignacion ::= expresion_relacional ;
expresion_asignacion ::= expresion_relacional ASIGNACION expresion_asignacion ;

expresion_relacional ::= expresion_relacional operador_relacional expresion_aditiva ;
expresion_relacional ::= expresion_aditiva ;

expresion_aditiva ::= expresion_aditiva MAS expresion_logica ;
expresion_aditiva ::= expresion_logica MENOS expresion_logica ;
expresion_aditiva ::= expresion_logica ;

expresion_logica ::= expresion_multiplicativa AND expresion_logica ;
expresion_logica ::= expresion_multiplicativa OR expresion_multiplicativa ;
expresion_logica ::= expresion_multiplicativa ;

expresion_multiplicativa ::= expresion_unaria ;
expresion_multiplicativa ::= expresion_multiplicativa operador_multiplicativo expresion_unaria ;

expresion_unaria ::= operador_unario expresion_unaria ;
expresion_unaria ::= expresion_acceso ;

expresion_acceso ::= factor ;
expresion_acceso ::= expresion_acceso CORAP expresion CORCIERRE ;
expresion_acceso ::= expresion_acceso PUNTO IDEN ;
expresion_acceso ::= expresion_acceso PUNTERO ;

factor ::= PAP expresion PCIERRE ;
factor ::= LIT_ENT ;
factor ::= LIT_REAL ;
factor ::= LIT_CADENA ;
factor ::= TRUE ;
factor ::= FALSE ;
factor ::= NULL ;
factor ::= IDEN ;

operador_relacional ::= MENOR ;
operador_relacional ::= MAYOR ;
operador_relacional ::= MENIGUAL ;
operador_relacional ::= MAYIGUAL ;
operador_relacional ::= IGUAL ;
operador_relacional ::= DISTINTO ;

operador_multiplicativo ::= POR ;
operador_multiplicativo ::= DIV ;
operador_multiplicativo ::= MOD ;

operador_unario ::= NOT ;
operador_unario ::= MENOS ;


