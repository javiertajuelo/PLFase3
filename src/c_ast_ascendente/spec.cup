package c_ast_ascendente;

import java_cup.runtime.*;
import asint.ClaseSemanticaEval;
import asint.SintaxisAbstractaEval.*;
import c_ast_ascendente.UnidadLexica.StringLocalizado;


scan with {: 
  return getScanner().next_token(); 
:};

parser code {:
   private GestionErroresEval errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};

init with {:
   errores = new GestionErroresEval();
   AnalizadorLexicoEval alex = (AnalizadorLexicoEval)getScanner();
   alex.fijaGestionErrores(errores);
:};

action code {:
  ClaseSemanticaEval sem = new ClaseSemanticaEval();
:};


terminal 
    IF, ELSE, WHILE, READ, WRITE, NEW, DELETE, CALL, NL, 
    STRUCT, PROC, TYPE, EVAL,
    INT, REAL, BOOL, STRING, PAP, PCIERRE, CORCIERRE, LLAVEAP, LLAVECIERRE,
    PUNTOYCOMA, COMA, PUNTO, REFERENCIA, FINDECL;
    
terminal StringLocalizado IDEN, LIT_ENT, LIT_REAL, LIT_CADENA, LIT_BOOLEANO,ASIGNACION,MAS,MENOS,AND,OR,NOT,DIV,POR,MOD,MENOR,MAYOR,MENIGUAL,MAYIGUAL,IGUAL,DISTINTO,CORAP,PUNTERO,NULL;

non terminal Prog programa;
non terminal DeclaracionesConSep declaraciones_con_separador ;
non terminal LDecs declaraciones;
non terminal Declaracion declaracion;
non terminal Cmps campos;
non terminal Tipo tipo0, tipo1, tipo2;
non terminal Params lista_parametros;
non terminal LParam parametros;
non terminal Tipo parametro;
non terminal Insts lista_instrucciones;
non terminal LIns instrucciones;
non terminal Instruccion instruccion;
non terminal Else else_opt;
non terminal Argus lista_argumentos;
non terminal LArgs argumentos;
non terminal Expresion expresion_asignacion, expresion_relacional, expresion_aditiva,
                           expresion_logica, expresion_multiplicativa, expresion_unaria,
                           expresion_acceso, factor;
                           
non terminal StringLocalizado operador_relacional, operador_multiplicativo, operador_unario;


programa ::= LLAVEAP declaraciones_con_separador:ds lista_instrucciones:li LLAVECIERRE
    {: RESULT = sem.prog(ds, li); :};

declaraciones_con_separador ::= declaraciones:ds FINDECL
    {: RESULT = sem.declaraciones_con_separador(ds); :};
    
declaraciones_con_separador ::=
    {: RESULT = sem.sin_declaraciones(); :};

declaraciones ::= declaraciones:ds PUNTOYCOMA declaracion:d
    {: RESULT = sem.muchas_decs(ds, d); :};
    
declaraciones ::= declaracion:d
    {: RESULT = sem.una_dec(d); :};

declaracion ::= tipo0:t IDEN:id
    {: RESULT = (Declaracion) sem.declaracion_tipo(t, id.str()).ponFila(id.fila()).ponCol(id.col()); :};
declaracion ::= TYPE tipo0:t IDEN:id
    {: RESULT = (Declaracion) sem.declaracion_type(t, id.str()).ponFila(id.fila()).ponCol(id.col()); :};
declaracion ::= PROC IDEN:id PAP lista_parametros:lp PCIERRE programa:p
    {: RESULT = (Declaracion) sem.declaracion_proc(id.str(), lp, p).ponFila(id.fila()).ponCol(id.col()); :};

tipo0 ::= tipo0:t CORAP LIT_ENT:ent CORCIERRE
    {: RESULT = (Tipo) sem.tipo_array(t, ent.str()).ponFila(ent.fila()).ponCol(ent.col()); :};
tipo0 ::= tipo1:t
    {: RESULT = t; :};

tipo1 ::= PUNTERO tipo1:t
    {: RESULT = sem.tipo_puntero(t); :};
tipo1 ::= tipo2:t
    {: RESULT = t; :};

tipo2 ::= INT
    {: RESULT = sem.tipo_int(); :};
tipo2 ::= REAL
    {: RESULT = sem.tipo_real(); :};
tipo2 ::= BOOL
    {: RESULT = sem.tipo_bool(); :};
tipo2 ::= STRING
    {: RESULT = sem.tipo_string(); :};
tipo2 ::= STRUCT LLAVEAP campos:c LLAVECIERRE
    {: RESULT = sem.tipo_struct(c); :};
tipo2 ::= IDEN:id
    {: RESULT = (Tipo) sem.tipo_iden(id.str()).ponFila(id.fila()).ponCol(id.col()); :};

campos ::= campos:c COMA declaracion:d
    {: RESULT = sem.muchos_campos(c, d); :};
campos ::= declaracion:d
    {: RESULT = sem.un_campo(d); :};

lista_parametros ::= parametros:p
    {: RESULT = sem.lista_parametros(p); :};
lista_parametros ::=
    {: RESULT = sem.sin_parametros(); :};

parametros ::= parametros:p COMA parametro:par
    {: RESULT = sem.muchos_parametros(p, par); :};
parametros ::= parametro:par
    {: RESULT = sem.un_parametro(par); :};

parametro ::= tipo0:t IDEN:id
    {: RESULT = (Tipo) sem.parametro(t, id.str()).ponFila(id.fila()).ponCol(id.col()); :};
parametro ::= tipo0:t REFERENCIA IDEN:id
    {: RESULT = (Tipo) sem.parametro_referencia(t, id.str()).ponFila(id.fila()).ponCol(id.col()); :};

lista_instrucciones ::= instrucciones:ins
    {: RESULT = sem.lista_instrucciones(ins); :};
lista_instrucciones ::=
    {: RESULT = sem.sin_instrucciones(); :};

instrucciones ::= instrucciones:ins PUNTOYCOMA instruccion:inst
    {: RESULT = sem.muchas_instrucciones(ins, inst); :};
instrucciones ::= instruccion:inst
    {: RESULT = sem.una_instruccion(inst); :};

instruccion ::= EVAL expresion_asignacion:ea
    {: RESULT = sem.instruccion_eval(ea); :};
instruccion ::= IF expresion_asignacion:ea programa:p else_opt:eo
    {: RESULT = sem.instruccion_if(ea, p, eo); :};
instruccion ::= WHILE expresion_asignacion:ea programa:p
    {: RESULT = sem.instruccion_while(ea, p); :};
instruccion ::= READ expresion_asignacion:ea
    {: RESULT = sem.instruccion_read(ea); :};
instruccion ::= WRITE expresion_asignacion:ea
    {: RESULT = sem.instruccion_write(ea); :};
instruccion ::= NL
    {: RESULT = sem.instruccion_nl(); :};
instruccion ::= NEW expresion_asignacion:ea
    {: RESULT = sem.instruccion_new(ea); :};
instruccion ::= DELETE expresion_asignacion:ea
    {: RESULT = sem.instruccion_delete(ea); :};
instruccion ::= CALL IDEN:id PAP lista_argumentos:la PCIERRE
    {: RESULT = (Instruccion) sem.instruccion_call(id.str(), la).ponFila(id.fila()).ponCol(id.col()); :};
instruccion ::= programa:p
    {: RESULT = sem.instruccion_programa(p); :};

else_opt ::= ELSE programa:p
    {: RESULT = sem.else_opt_else(p); :};
else_opt ::= 
    {: RESULT = sem.else_opt_vacio(); :};

lista_argumentos ::= argumentos:a
    {: RESULT = sem.lista_argumentos(a); :};
lista_argumentos ::= 
    {: RESULT = sem.sin_argumentos(); :};

argumentos ::= argumentos:a COMA expresion_asignacion:ea
    {: RESULT = sem.muchos_argumentos(a, ea); :};
argumentos ::= expresion_asignacion:ea
    {: RESULT = sem.un_argumento(ea); :};

expresion_asignacion ::= expresion_relacional:er ASIGNACION:op expresion_asignacion:ea
    {: RESULT = (Expresion) sem.mkop(op.str(),er, ea).ponFila(op.fila()).ponCol(op.col()); :};
expresion_asignacion ::= expresion_relacional:er
    {: RESULT = er; :};

expresion_relacional ::= expresion_relacional:er operador_relacional:op expresion_aditiva:ea
    {: RESULT = (Expresion) sem.mkop(op.str(), er, ea).ponFila(op.fila()).ponCol(op.col()); :};
expresion_relacional ::= expresion_aditiva:ea
    {: RESULT = ea; :};

expresion_aditiva ::= expresion_aditiva:ea MAS:op expresion_logica:el
    {: RESULT = (Expresion) sem.mkop(op.str(), ea, el).ponFila(op.fila()).ponCol(op.col());; :};
expresion_aditiva ::= expresion_aditiva:ea MENOS:op expresion_logica:el
    {: RESULT = (Expresion) sem.mkop(op.str(), ea, el).ponFila(op.fila()).ponCol(op.col());; :};
expresion_aditiva ::= expresion_logica:el
    {: RESULT = el; :};

expresion_logica ::= expresion_multiplicativa:em AND:op expresion_logica:e1
    {: RESULT = (Expresion) sem.mkop(op.str(), em, e1).ponFila(op.fila()).ponCol(op.col()); :};
expresion_logica ::= expresion_multiplicativa:em OR:op expresion_multiplicativa:em2
    {: RESULT = (Expresion) sem.mkop(op.str(), em, em2).ponFila(op.fila()).ponCol(op.col()); :};
expresion_logica ::= expresion_multiplicativa:em
    {: RESULT = em; :};

expresion_multiplicativa ::= expresion_multiplicativa:em operador_multiplicativo:op expresion_unaria:eu
    {: RESULT = (Expresion) sem.mkop(op.str(), em, eu).ponFila(op.fila()).ponCol(op.col()); :};
expresion_multiplicativa ::= expresion_unaria:eu
    {: RESULT = eu; :};

expresion_unaria ::= operador_unario:op expresion_unaria:eu
    {: RESULT = (Expresion) sem.mkop(op.str(), eu, null).ponFila(op.fila()).ponCol(op.col());; :};
expresion_unaria ::= expresion_acceso:ea
    {: RESULT = ea; :};

expresion_acceso ::= expresion_acceso:ea CORAP:op expresion_asignacion:ex CORCIERRE
    {: RESULT = (Expresion) sem.expresion_acceso_array(ea, ex).ponFila(op.fila()).ponCol(op.col()); :};
expresion_acceso ::= expresion_acceso:ea PUNTO IDEN:id
    {: RESULT = (Expresion) sem.expresion_acceso_punto(ea, id.str()).ponFila(id.fila()).ponCol(id.col()); :};
expresion_acceso ::= expresion_acceso:ea PUNTERO:op
    {: RESULT = (Expresion) sem.expresion_acceso_puntero(ea).ponFila(op.fila()).ponCol(op.col()); :};
expresion_acceso ::= factor:f
    {: RESULT = f; :};

factor ::= PAP expresion_asignacion:ea PCIERRE
    {: RESULT = ea; :};
factor ::= LIT_ENT:ent
    {: RESULT = (Expresion) sem.factor_literal_entero(ent.str()).ponFila(ent.fila()).ponCol(ent.col()); :};
factor ::= LIT_REAL:rl
    {: RESULT = (Expresion) sem.factor_literal_real(rl.str()).ponFila(rl.fila()).ponCol(rl.col()); :};
factor ::= LIT_CADENA:lc
    {: RESULT = (Expresion) sem.factor_literal_cadena(lc.str()).ponFila(lc.fila()).ponCol(lc.col()); :};
factor ::= LIT_BOOLEANO:b
    {: RESULT = (Expresion) sem.factor_literal_bool(b.str()).ponFila(b.fila()).ponCol(b.col()); :};
factor ::= NULL:n
    {: RESULT = (Expresion) sem.factor_null().ponFila(n.fila()).ponCol(n.col()); :};
factor ::= IDEN:id
    {: RESULT = (Expresion) sem.factor_identificador(id.str()).ponFila(id.fila()).ponCol(id.col()); :};
    
    
    
operador_multiplicativo ::= POR:m
	{: RESULT = m; :};
operador_multiplicativo ::= DIV:m
	{: RESULT = m; :};
operador_multiplicativo ::= MOD:m
	{: RESULT = m; :}; 
	   
operador_unario ::= NOT:m
	{: RESULT = m; :};
operador_unario ::= MENOS:m
	{: RESULT = m; :};
	
operador_relacional ::= MENOR:m
    {: RESULT = m; :};
operador_relacional ::= MAYOR:m
	{: RESULT = m; :};
operador_relacional ::= MENIGUAL:m
	{: RESULT = m; :};
operador_relacional ::= MAYIGUAL:m
	{: RESULT = m; :};
operador_relacional ::= IGUAL:m
	{: RESULT = m; :};
operador_relacional ::= DISTINTO:m
	{: RESULT = m; :};

